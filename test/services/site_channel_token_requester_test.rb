require "test_helper"
require "webmock/minitest"

class SiteChannelTokenRequesterTest < ActiveJob::TestCase
  test "when offline generates a random token" do
    prev_offline = Rails.application.secrets[:api_eyeshade_offline]
    begin
      Rails.application.secrets[:api_eyeshade_offline] = true

      token = SiteChannelTokenRequester.new(channel: nil).perform
      assert_equal 64, token.length
    ensure
      Rails.application.secrets[:api_eyeshade_offline] = prev_offline
    end
  end

  test "when online, returns a token generated by eyeshade" do
    prev_offline = Rails.application.secrets[:api_eyeshade_offline]
    begin
      Rails.application.secrets[:api_eyeshade_offline] = false

      details = site_channel_details(:default_details)
      stub_request(:put, /v1\/owners\/#{URI.escape(details.channel.publisher.owner_identifier)}\/verify\/#{details.brave_publisher_id}/).
          with(headers: {'Authorization'=>"Bearer #{Rails.application.secrets[:api_eyeshade_key]}",
                         'Content-Type'=>'application/json'},
               body:
                   <<~BODY
                      {
                        "verificationId": "#{details.brave_publisher_id}"
                      }
                   BODY
          ).to_return(status: 200, body: "{\"token\":\"abc123\"}", headers: {})

      assert_equal "abc123", SiteChannelTokenRequester.new(channel: details.channel).perform
    ensure
      Rails.application.secrets[:api_eyeshade_offline] = prev_offline
    end
  end
end
